  version: '3.7'

  # Define services
  services:
    # App backend service
    api:
      # Configuration for building the docker image for the backend service
      build:
        context: ../react-spring-jwt
        dockerfile: Dockerfile
      ports:
        - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
      restart: always
      #    depends_on:
      #      - db # This service depends on mysql. Start that first.
      environment: # Pass environment variables to the service
        SPRING_PROFILES_ACTIVE: "dev"
#        SPRING_DATASOURCE_USERNAME: ${JDBC_DATABASE_USERNAME}
#        SPRING_DATASOURCE_PASSWORD: ${JDBC_DATABASE_PASSWORD}
      networks: # Networks to join (Services on the same network can communicate with each other using their name)
        - backend
        - frontend

    # Frontend Service
    client:
      build:
        context: react-client # Use an image built from the specified dockerfile
#        dockerfile: react-client/Dockerfile
        args:
          REACT_APP_API_BASE_URL: http://localhost:8080/api/
      ports:
        - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
      restart: always
      depends_on:
        - api
      networks:
        - frontend
#
#    mongodb:
#      image: mongo
#      container_name: mongodb
#      ports:
#        - "27017:27017"
#      volumes:
#        - db-data:/data
#      environment:
#        - MONGO_INITDB_ROOT_USERNAME=rootuser
#        - MONGO_INITDB_ROOT_PASSWORD=rootpass
#    mongo-express:
#      image: mongo-express
#      container_name: mongo-express
#      restart: always
#      ports:
#        - 8081:8081
#      environment:
#        - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
#        - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
#        - ME_CONFIG_MONGODB_SERVER=mongodb
  # Volumes
  volumes:
    db-data:

  # Networks to be created to facilitate communication between containers
  networks:
    backend:
    frontend:

  # HEROKU DEPLOYMENT:
  # - To build jar file run:
  #   docker-compose pull
  #   docker-compose up --force-recreate --build -d
  # - To push to heroku run:
  #   heroku container:push web --app ultrasound-fellowship-app

